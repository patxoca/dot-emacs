# -*- mode: snippet -*-
# name: constructor: function (...)
# $Id$
# key: func
# type: snippet
# contributor: Alexis Roda <alexis.roda.villalonga@gmail.com>
# uuid: 2444ed3188f-eca8-4e1d-b823-967212784ec4
# --
constructor: function ($3) {
    // Sumari:
    //   $4
    //${3:$(let* ((indent
          (concat "\n" (make-string (- (current-column) 2) 32)))
         (indent_ast
          (concat indent "// "))
         (args
          (mapconcat
           '(lambda (x)
              (if (not (string= x ""))
                  (concat "- " x " : ")))
           (mapcar
            '(lambda (x)
               (replace-regexp-in-string "[[:blank:]]*$" ""
                                         (replace-regexp-in-string "^[[:blank:]]*" "" (car x))))
            (mapcar
             '(lambda (x) (split-string x "="))
             (split-string text ",")))
           indent_ast)))
    (if (string= args "")
        ""
      (mapconcat
       'identity
       (list "" "Arguments:" args)
       indent_ast)))}
    //
    ${3:$(let* ((indent
          (concat "\n" (make-string (current-column) 32)))
         (indent_ast
          (concat indent ""))
         (args
          (mapconcat
           '(lambda (x)
              (if (not (string= x ""))
                  (concat "this." x " = " x)))
           (mapcar
            '(lambda (x)
               (replace-regexp-in-string "[[:blank:]]*$" ""
                                         (replace-regexp-in-string "^[[:blank:]]*" "" (car x))))
            (mapcar
             '(lambda (x) (split-string x "="))
             (split-string text ",")))
           indent_ast)))
    (if (string= args "")
        ""
      (mapconcat
       'identity
       (list args)
       indent_ast)))}
    $0
},

# -*- mode: snippet -*-
# name: pywebpack
# key: pywebpack
# group:
# type: snippet
# contributor: Alexis Roda <alexis.roda.villalonga@gmail.com>
# expand-env: ((yas-indent-line 'fixed))
# uuid: 36cff845-ac41-45ba-9291-add53bcba170
# --
import distutils.cmd
import distutils.errors
import distutils.log
import setuptools.command.sdist
import shutil
import subprocess


class webpack(distutils.cmd.Command):
    """Comanda per executar webpack dins un paquet Python.

    Automatitza el processament del codi javascript i assets
    necessaris pel frontend i facilita distribuir el resultat dins el
    paquet python.

    Configuració en "setup.cfg" i opciones de línia d'ordres:

    - source_dir: directori amb el projecte webpack, conté el codi js,
      assets etc.
    - build_dir: directori on webpack desa els bundles
    - dest_dir: directori on es vol copiar els bundles. P.e. el
      directori "static" de django.

      COMPTE!!!! dest_dir s'esborra cada vegada.

    """

    description = "executa webpack en un paquet Python"
    user_options = [
        # The format is (long option, short option, description).
        ("source-dir=", None, "ruta del directori del projecte webpack"),
        ("build-dir=", None, "ruta del directori 'output' de webpack"),
        ("dest-dir=", None, "ruta del directori 'static' de django. S'esborra!"),
    ]

    def initialize_options(self):
        self.source_dir = ""
        self.build_dir = ""
        self.dest_dir = ""

    def finalize_options(self):
        self.source_dir = self._check_path(self.source_dir, "source_dir", must_exist=True)
        self.build_dir = self._check_path(self.build_dir, "build_dir")
        self.dest_dir = self._check_path(self.dest_dir, "dest_dir", local=True)

    def run(self):
        command = ["npm", "run", "build"]
        self.announce(
            "Executant comanda: %s" % " ".join(command),
            level=distutils.log.INFO
        )
        try:
            subprocess.check_call(command, cwd=self.source_dir)
            if os.path.isdir(self.dest_dir):
                shutil.rmtree(self.dest_dir)
            shutil.copytree(self.build_dir, self.dest_dir)
        except Exception as e:
            raise distutils.errors.DistutilsExecError(str(e))

    def _check_path(self, path, label, must_exist=False, local=False):
        path = path.strip()
        if not path:
            raise distutils.errors.DistutilsOptionError(
                "Falta opció obligatòria '%s'" % label
            )
        if not os.path.isabs(path):
            path = os.path.join(os.getcwd(), path)
        path = os.path.normpath(path)
        if local and not path.startswith(os.getcwd()):
            raise distutils.errors.DistutilsFileError(
                "%s requerix una ruta local al paquet" % label
            )
        if must_exist and not os.path.exists(path):
            raise distutils.errors.DistutilsFileError(
                "L'arxiu '%s' no existeix" % path
            )
        return path


class sdist(setuptools.command.sdist.sdist):
    """Comanda 'sdist' que executa webpack."""

    def run(self):
        self.run_command("webpack")
        setuptools.command.sdist.sdist.run(self)


# afegir a la crida de setup()
#
#     cmdclass={
#         "webpack": webpack,
#         'sdist': sdist,
#     },

# afegir dins setup.cfg
#
# [webpack]
# source_dir = ${1:nom_paquet}/${2:dir_js}
# build_dir = $1/$2/build
# dest_dir = $1/static/$1/bundles

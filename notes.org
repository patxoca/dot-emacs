#+TITLE: Notes
#+AUTHOR: Alexis Roda
#+EMAIL: alexis.roda.villalonga@gmail.com

#+TODO: TODO(@) PAUS(@) DONE(@)
#+TODO: | CANC(c@)


* Bugs, molèsties, millores etc.

# Aquesta secció és el target d'una plantilla de captura. Si es canvia
# el text del títol caldrà ajustar la plantilla.

** TODO moure funcionalitat                                     :enhancement:

Algunes configuracions activen funcionalitats o fan canvis /globals/
que no els corresponen.

Si realment són globals mirar de moure-les al /hook/ d'un mode tipus
=fundamental-mode=.

- [ ] [[file:settings.org::*=abbrev=][=abbrev=]]: activa el mode globalment
- [ ] [[file:settings.org::*=dired=][=dired=]]: modifica el /keymap/ local
- [ ] [[file:settings.org::*=electric-pair=][=electric-pair=]]: activa el mode globalment
- [ ] [[file:settings.org::*=engine-mode=][=engine-mode=]]: activa el mode globalment
- [ ] [[file:settings.org::*=font-lock=][=font-lock=]]: activa el mode globalment
- [ ] [[file:settings.org::*=hl-line=][=hl-line=]]: activa el mode globalment
- [ ] [[file:settings.org::*=ido=][=ido=]]: ídem.
- [ ] [[file:settings.org::*=modeline=][=modeline=]]: ací no tinc clar si cal un apartat dins /paquets/ o
  és millor moure-ho a /interfície d'usuari/.
- [ ] [[file:settings.org::*=mwheel=][=mwheel=]]: si realment =mouse-wheel-mode= s'activa en alguna
  altra part eliminar l'activació, sinó activar el mode globalment.
- [ ] [[file:settings.org::*=projectile=][=projectile=]]: no recordo el funcionament de projectile, imagino
  que s'activa globalment, no per buffer. Probablament moure a un
  /hook/ o altre.
- [ ] [[file:settings.org::*=subword=, =superword=][=subword=, =superword=]]: es limita a definir dos comandes.
  Moure-les a la secció corresponent?
- [ ] [[file:settings.org::*=swiper=][=swiper=]]: defineix una comanda. Moure-la?
- [ ] [[file:settings.org::*=which-key=][=which-key=]]: moure activació
- [ ] [[file:settings.org::*=yasnippet=][=yasnippet=]]: moure activació
- [ ] [[file:settings.org::*=emmet= (anteriorment =zencoding=)][=emmet=]]: (des)defineix una tecla del mapa local. Està en el
  límit.
- [ ] [[file:settings.org::*=company-tern=][=company-tern=]]: no hauria de modificar =company-backends=
- [ ] [[file:settings.org::*=js2-mode=][=js2-mode=]]: ídem amb =auto-mode-alist=
- [ ] [[file:settings.org::*=elpy=][=elpy=]]: modifica el /keymap/ local
- [ ] [[file:settings.org::*=pytest=][=pytest=]]: ídem
- [ ] [[file:settings.org::*=python=][=python=]]: activa =elpy=. Crec recordar que és una inicialitació
  del paquet (global) no del buffer (local). No tinc clar on moure-ho.
  També modifica =comint-output-filter-functions=. Potser es podrien
  moure a una nova secció /Configuració/.

** TODO revisar compilació de la configuració                          :task:

#+begin_src text :tangle no
  Compiling file /home/aroda/.emacs.d/conf.d/settings.el at Thu Mar 29 19:35:20 2018
  settings.el:147:9:Warning: assignment to free variable
      ‘buffer-menu-buffer-font-lock-keywords’

  In buffer-menu-custom-font-lock:
  settings.el:164:32:Warning: ‘font-lock-fontify-buffer’ is for interactive use
      only; use ‘font-lock-ensure’ or ‘font-lock-flush’ instead.
  settings.el:246:9:Warning: assignment to free variable
      ‘ediff-split-window-function’
  settings.el:247:9:Warning: assignment to free variable
      ‘ediff-window-setup-function’
  settings.el:268:73:Warning: reference to free variable ‘latin-1’

  In arv/wm-cycle:
  settings.el:472:5:Warning: reference to free variable ‘subword-mode’
  settings.el:475:5:Warning: reference to free variable ‘superword-mode’

  In arv/wm-cycle-2:
  settings.el:487:5:Warning: reference to free variable ‘subword-mode’

  In arv/scratch:
  settings.el:588:28:Warning: reference to free variable ‘lisp-mode’
  settings.el:886:9:Warning: ‘python-shell-virtualenv-path’ is an obsolete
      variable (as of 25.1); use ‘python-shell-virtualenv-root’ instead.

  In arv/-sphinx-locate-makefile:
  settings.el:1063:8:Warning: ‘(string=)’ is a malformed function
  settings.el:1063:8:Warning: ‘(string=)’ is a malformed function

  In arv/sphinx-build-html:
  settings.el:1093:17:Warning: reference to free variable ‘phinx-build’
  settings.el:1102:4:Warning: reference to free variable ‘rst-mode-map’
  settings.el:1173:7:Warning: ‘display-buffer-reuse-frames’ is an obsolete
      variable (as of 24.3); use a ‘reusable-frames’ alist entry in
      ‘display-buffer-alist’.

  In arv/upcase-word:
  settings.el:1197:16:Warning: looking-back called with 1 argument, but requires
      2-3

  In arv/downcase-word:
  settings.el:1205:16:Warning: looking-back called with 1 argument, but requires
      2-3

  In arv/duplicate-line-or-region-dwim:
  settings.el:1237:13:Warning: assignment to free variable ‘beg’
  settings.el:1253:22:Warning: reference to free variable ‘beg’

  In end of data:
  settings.el:1820:1:Warning: the function ‘sql-highlight-postgres-keywords’
      might not be defined at runtime.
  settings.el:1820:1:Warning: the function ‘arv/-’ is not known to be defined.
#+end_src

** TODO analitzar arranc                                               :task:

Al activar el mode verbós he identificat aquests dos com els més
lents. La resta estan per baix de 0.1 segons.

#+begin_src text :tangle no
  Loading package js2-refactor...done (0.697s)
  Configuring package yasnippet...done (0.190s)
#+end_src

Mirar que és carrega durant l'arranc per veure si alguna cosa sobra
etc.

** TODO abreviatures en =abbrev=                                       :idea:

Actualment les abreviatures es guarden en un arxiu. Per la forma en
que les utilitzo (molt poc) probablement sigui preferible definir-les
directament en la configuració.

20180417: en [[file:Sacha.org::*Define%20more%20abbreviations][la configuració de Sacha Chua]] s'utilitza una taula /org/
per definir les abreviatures.

** TODO normalitzar rutes de fitxers                            :enhancement:

En alguns llocs utilitzo rutes calculades dinàmicament i en d'altres
literals. Problemes:

- dificulta moure la configuració a un altre directori. Probablement
  no té importància ja que únicament limita el directori utilitzat
  dins =~/.emacs.d= i =conf.d= sembla perfectament vàlid.

- més important és que al fixar els separadors en la ruta no
  funcionarà en windows. Tampoc és que utilitzi molt emacs en windows
  ni que necessiti un entorn completament configurat, però estaria bé.

Pot ser tot dinàmic?

Definir /helpers/ per simplificar i /dotar de significat/ a les rutes,
per exemple:

#+begin_src emacs-lisp :tangle no
  (defun arv/path-emacs-conf (&rest components)
    (apply arv/path-concat (cons arv/emacs-conf dir components)))
#+end_src

El lloc on és més dificil (incòmode) utilitzar rutes calculades és en
la clausula =:load-path= de =use-package=. Hi ha algunes limitacions,
[[https://github.com/jwiegley/use-package#extending-the-load-path][revisar la documentació]].

[[http://howardism.org/Technical/Emacs/literate-devops.html][Ací]] hi ha un exemple interessant: defineix una variable a nivell de
document /org/ que després s'utilitza en un bloc de codi. Em queda el
dubte si es pot generalitzar o està limitat a blocs /sh/. La idea
seria definir variables per =conf.d= i =emacs.d= i escriure
=:load-path "$CONFD/foobar". Falta per resoldre el tema del separador.

Pensant-ho millor, no sé si açò funcionaria (suposant que sigui
possible). L'execució depèn d'elements definits en el document i no
tinc clar si /tangle/ serà prou intel·ligent per detectar-ho. Executar
el bloc de codi en el context del document sembla bastant diferent.

** TODO Revisar configuració backends de company                :enhancement:
   :PROPERTIES:
   :CREATED: [2018-03-30 dv 00:28]
   :REFERER: [[file:settings.org::*=company=][=company=]]
   :END:

Revisar si ha hagut cap canvi en la configuració dels /backends/. No
m'agrada activar-los globalment, seria millor activar els rellevants
per cada mode en el corresponent /hook/.

** TODO Revisar estructura                                             :idea:
   :PROPERTIES:
   :CREATED: [2018-03-30 dv 03:37]
   :REFERER: [[file:settings.org::*=xref-js2=][=xref-js2=]]
   :END:

No tinc clar si és bona idea tindre paquets en dos seccions separades
(/paquets/ i /modes/).

** TODO Entorn per desenvolupar en javascript                   :enhancement:
   :PROPERTIES:
   :CREATED: [2018-03-31 ds 01:34]
   :REFERER: [[file:~/.emacs.d/conf.d/settings.org::*javascript][javascript]]
   :END:

Integrar un interpret (nodejs?) en la configuració.

- https://github.com/abicky/nodejs-repl.el, disponible a melpa stable.

- [[https://github.com/NicolasPetton/Indium][Indium]] és un IDE per javascript. Té molt bona pinta.

- [[https://github.com/ananthakumaran/tide][TypeScript Interactive Development Environment for Emacs]]

- [[https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html][Setting up Emacs for JavaScript (part #1)]] i [[https://emacs.cafe/emacs/javascript/setup/2017/05/09/emacs-setup-javascript-2.html][Setting up Emacs for
  JavaScript (part #2)]]

** TODO Investigar /rope/                                              :task:
   :PROPERTIES:
   :CREATED: [2018-03-31 ds 01:37]
   :REFERER: [[file:~/.emacs.d/conf.d/settings.org::*=python=][=python=]]
   :END:

Sembla que /rope/ te un nou mantenidor. Fer un seguiment:

https://github.com/python-rope/rope

** TODO Patró de cerca/revisió                                         :idea:
   :PROPERTIES:
   :CREATED: [2018-03-31 ds 03:00]
   :REFERER: [[file:~/.emacs.d/conf.d/settings.org::*apropos][apropos]]
   :END:

Mirar si =occur= + =list-matching-lines-default-context-lines= podria
ser una alternativa a la forma (poc pràctica) en que utilitzo /swiper/
per buscar i revisar en el codi.

Es podria definir una nova comanda que demani el nombre de línies de
context.

Crec que no és necessari afegir context. És suficient amb seleccionar
automàticament el buffer =*occur*=. Una vegada en el buffer =*occur*=
les comandes =o= i =C-o= funcionen com és habitual i permeten veure el
context que es necessiti.

Depenent de l'ús principal de la comanda, el prefix =C-u= poc
activar/inhibir el canvi de buffer. En la comanda =occur= original el
significat de =C-u= no sembla gaire pràctic.

Crec que el que vull és algo tipus =swiper= (que al moure el cursor
mostri la linea seleccionada en el buffer) però que sigui persistent:
cerco, trobo, modifico, torno a la cerca.

** TODO descobrir paquets                                              :note:
   :PROPERTIES:
   :CREATED: [2018-04-02 dl 13:01]
   :REFERER:
   :END:

Per no oblidar-ho:

- https://emacsmirror.net/: The Emacsmirror is a growing collection of
  Emacs Lisp packages. All mirrored packages are available as Git
  repositories.

- https://github.com/emacs-tw/awesome-emacs: Awesome Emacs, a
  community driven list of useful Emacs packages, utilities and
  libraries. Most of the following packages are available in MELPA. We
  recommend installing packages with it.

** TODO elimina blocs sh?                                              :idea:
   :PROPERTIES:
   :CREATED: [2018-04-02 dl 18:09]
   :REFERER: [[file:~/.emacs.d/conf.d/settings.org::*Blocs%20de%20codi%20sh][Blocs de codi sh]]
   :END:

Si estic configurant emacs perquè collons utilitzo sh?!

El problema amb l'enfoc actual és que el codi emacs lisp s'executa en
cada arranc i pot incorporar nous paquets/elements mentre que el codi
sh només s'executa el primer arranc. Si s'afegeix un bloc sh cal
executar-lo manualment.

Una possibilitat seria [[https://github.com/quelpa/quelpa-use-package][=quelpa-use-package=]], que integra [[https://github.com/quelpa/quelpa][=quelpa=]] amb
=use-package=. Per exemple:

#+begin_src emacs-lisp :tangle no
  (use-package abc-mode
    :quelpa ((abc-mode :fetcher github
                       :repo "mkjunker/abc-mode")
             :upgrade t))
#+end_src

** TODO highlight-thing-at-point                                       :idea:
   :PROPERTIES:
   :CREATED: [2018-04-03 dt 14:15]
   :REFERER: [[file:~/.bashrc::export%20INFOPATH="~/.local/share/info:$INFOPATH"]]
   :END:

Bastant habitualment vull comprovar que he escrit un nom de variable
correctament (especialment en scripts sh) i el que acabo fent és un
buscar.

He trobat la funció =highlight-symbol-at-point= (=M-s h .=) però en sh
sembla que no acaba de funcionar com vull. Investigar-ho.

** TODO ressaltar finestra activa                                      :idea:
   :PROPERTIES:
   :CREATED: [2018-04-04 dc 14:17]
   :REFERER:
   :END:

   - State "TODO"       from "TODO"       [2018-08-18 ds 20:13] \\
     Ho vaig investigar fa algun temps, de memòria: no és possible
     tindre finestres amb color de fons diferent dins el mateix frame.

Mirar si és possible ressaltar la finestra activa (o des-ressaltar la
resta, amb un fons lleugerament més fosc p.e.).

** TODO renombrar comandes de =settings.org= ?                         :idea:
   :PROPERTIES:
   :CREATED: [2018-04-04 dc 21:34]
   :REFERER: [[file:~/.emacs.d/conf.d/notes.org]]
   :END:

En algunes configuracions he vist funcions prefixades amb =my/=. No
segueixo eixa convenció però potser seria bona idea pels simbols
definits en =settings-org=, una especie d'espai de noms local/privat i
independent dels mòduls.

A més d'evitar conflictes de noms permet identificar els elements
/privats/. No sé si cap d'aquestes consideracions és molt realista.

** PAUS error en x-my/camelize                                          :bug:
   :PROPERTIES:
   :CREATED: [2018-04-18 dc 08:25]
   :REFERER: [[file:~/.emacs.d/conf.d/settings.org::*=arv/camelize=][=arv/camelize=]]
   :END:

   - State "PAUS"       from "TODO"       [2020-03-29 dg 19:19] \\
     El problema és que en =org-mode= =?'= té la sintaxi =?w=.

     He provat movent el =with-syntax-table (standard-syntax-table)= al
     principi de la funció de forma que en totes les cerques en que intervé
     la sintaxi dels caràcters s'apliquin les mateixes regles. Funciona
     però no tinc clar que sigui la solució. Bé, no tinc clara la semàntica
     de la funció.

     Pensaments al respecte:

     - Suposo que no hauria de complicar-me la vida i limitar-me a
       convertir =foo_bar= en =FooBar= i en =foo_bar= un altre cop, és a
       dir, el mode del buffer no hauria d'influir.

     - En =emacs-lisp= no s'utilitza la majúscula, el separador idiomàtic
       és =?-= i admet quasi qualsevol caràcter en un identificador. En la
       resta de llenguatges que utilizo la majúscula és acceptable per
       alguns identificadors i el separador és =?_=.

     - Potser utilitzar =prog-mode-syntax-table= enlloc de
       =standard-syntax-table= i utilizar el literal =?_= enlloc de la
       classe =\s_=.

     Un altre problema que he detectat fent proves és que no té en compte
     acrònims, com =tutor_URV= que s'hauria de convertir en =TutorURV= i no
     en =TutorUrv=.

En =org-mode= al intentar convertir "l'xxx" en "L'xxx" prement =M-c=
s'obté "Lxxx".

** TODO molestia en els canvis d'estat en =org-mode=              :annoyance:
   :PROPERTIES:
   :CREATED: [2018-08-18 ds 20:15]
   :REFERER: [[file:~/.emacs.d/conf.d/notes.org::*revisar%20snippets][revisar snippets]]
   :END:

Al fer un canvi d'estat que requereix un missatge aquest s'insereix
separat per una línia de la capçalera i enganxat al text principal,
abans era al revés, enganxat a la capçalera i separat del text.

Prefereixo el comportament anterior o separat en els dos costats.

** TODO inserir prefix automàticament en codi emacs lisp               :idea:
   :PROPERTIES:
   :CREATED: [2018-08-28 dt 12:27]
   :REFERER:
   :END:

http://emacsninja.com/posts/fixing-my-annoyance-with-emacs-lisp.html

És una idea interessant, caldria adaptar-la a la meva forma de
treballar: definir una variable local al buffer + algun automatisme
(yasnippet, tecla?).

** TODO [1/1] Agrupar definicions de colors/faces?                     :idea:
   :PROPERTIES:
   :CREATED: [2019-01-18 dv 08:33]
   :REFERER: [[file:~/.emacs.d/conf.d/settings.org::*=hi-lock=][=hi-lock=]]
   :END:

El color de =arv/hi-red= (aplicat a etiquetes =FIXME:=) no es
visualitza bé en el tema =doom-one=.

Possiblement hagi definicions de colors desperdigades per tota la
configuració. De cara a ajustar-les quan canvio el tema sembla bona
idea agrupar-les en la secció =tema=, per contra també sembla bona
idea agrupar la definició del color al activar el paquet.

Mirar que es pot fer.

*** DONE Comentari 18/03/2020

Vull provar el tema =modus-operandi= i em trobo amb moltes
re-definicions de /faces/ que no funcionen bé amb ell però que no
voldria perdre per si decideixo revertir el tema o alternar entre
temes en funció del estat d'ànim.

Per adreçar-ho sembla bona idea definir funcions
=my/customize-theme-modus-operandi=, =my/customize-theme-wombat= que
recullguin tots els canvis.

*** Comentari 19/03/2020
   :PROPERTIES:
   :CREATED: [2020-03-19 dj 19:54]
   :REFERER: [[file:~/.emacs.d/conf.d/settings.org::*wombat][wombat]]
   :END:

En =(my/customize-theme-wombat)= la definició de faces de "term" és
molt compacta, mirar si es pot aplicar a la resta de definicions.

Un altre detall en que no havia caigut: =modus-operandi= aparentment
configura les faces sense que s'hagi carregat el mòdul/paquet que les
defineix (té sentit). Jo utilitzo =with-eval-after-load=.

=modus-operandi= utilitza [[help:custom-theme-set-faces][=custom-theme-set-faces=]]. Investigar-ho.

** TODO investigar/provar =truncate-lines=                             :idea:
   :PROPERTIES:
   :CREATED:  [2019-04-15 dl 11:31]
   :END:

https://www.emacswiki.org/emacs/TruncateLines

En alguns buffer preferiria truncar les línies llargues. No tinc un
criteri clar d'on sí. Tinc clar que en modes de programació no, però
normalment les línies ja son curtes.

** PAUS Definir =arv/ffap-ffip-dwin=                                   :idea:
   :PROPERTIES:
   :CREATED: [2019-04-22 dl 16:28]
   :REFERER: [[file:~/.emacs.d/conf.d/customize/turing.el::(require]]
   :END:

   - State "PAUS"       from "TODO"       [2019-04-28 dg 22:09] \\
     La funció [[file:/opt/emacs/26.2/share/emacs/26.2/lisp/ffap.el.gz::(defun%20ffap-guesser%20()][ffap-guesser]] obté la ruta en el punt i la retorna o
     retorna =nil=. A partir d'ací sembla fàcil.

De vegades (normalment en org) vull visitar un arxiu que el nom
apareix en el buffer (normalment en el resultat d'avaluar un bloc de
codi), =find-file-at-point= és perfecte.

=C-x f= és un bon binding però el tinc assignat a
=find-file-in-project= (que no utilitzo en django però pot ser útil en
altres projectes).

Potser seria útil una comanda que primer intenta =ffap= i si no
correspon a un arxiu (no existeix) executa =ffip=.

- [[file:/opt/emacs/26.2/share/emacs/26.2/lisp/ffap.el.gz::(defun%20find-file-at-point%20(&optional%20filename)][=find-file-at-point=]]

- [[file:~/.emacs.d/elpa/find-file-in-project-20190408.325/find-file-in-project.el::(defun%20find-file-in-project%20(&optional%20open-another-window)][=find-file-in-project=]]

** TODO sortir del minibuffer                                     :annoyance:
*** TODO Investigar paquet =delsel=                             :enhancement:
   :PROPERTIES:
   :CREATED:  <2019-04-23 dt 23:58>
   :END:

De vegades em quedo enganxat amb el minibufer, que no accepta C-g
perquè to té el focus. Cal fer clic i resulta molest.

El nom d'aquesta variable =minibuffer-keyboard-quit= suggereix que pot
haver una solució millor.

https://www.emacswiki.org/emacs/delsel.el

*** TODO sortir del minibuffer                                    :annoyance:
   :PROPERTIES:
   :CREATED: [2020-03-08 dg 18:38]
   :REFERER:
   :END:

De vegades =C-g= no avorta el que s'estigui fent en el minibuffer i
resulta frustrant, cal canviar al minibufer, cancelar i tornar al
buffer en que estic treballant.

[[https://with-emacs.com/posts/tips/quit-current-context/][Aquest post]] sembla tindre una solució:

#+begin_src emacs-lisp
  (defun keyboard-quit-context+ ()
    "Quit current context.

  This function is a combination of `keyboard-quit' and
  `keyboard-escape-quit' with some parts omitted and some custom
  behavior added."
    (interactive)
    (cond ((region-active-p)
           ;; Avoid adding the region to the window selection.
           (setq saved-region-selection nil)
           (let (select-active-regions)
             (deactivate-mark)))
          ((eq last-command 'mode-exited) nil)
          (current-prefix-arg
           nil)
          (defining-kbd-macro
            (message
             (substitute-command-keys
              "Quit is ignored during macro defintion, use \\[kmacro-end-macro] if you want to stop macro definition"))
            (cancel-kbd-macro-events))
          ((active-minibuffer-window)
           (when (get-buffer-window "*Completions*")
             ;; hide completions first so point stays in active window when
             ;; outside the minibuffer
             (minibuffer-hide-completions))
           (abort-recursive-edit))
          (t
           (when completion-in-region-mode
             (completion-in-region-mode -1))
           (let ((debug-on-quit nil))
             (signal 'quit nil)))))

  (global-set-key [remap keyboard-quit] #'keyboard-quit-context+)
#+end_src


** TODO Revisar vídeo                                                  :idea:
   :PROPERTIES:
   :CREATED: [2019-04-28 dg 21:42]
   :REFERER: [[file:/opt/emacs/26.2/share/emacs/26.2/lisp/ffap.el.gz::(ffap-read-file-or-url]]
   :END:

[[https://www.youtube.com/watch?v=CTOhosGQ2f0][Aquest vídeo de youtube]] té algunes idees interessant pel que fa a la
definició de tecles.

Per veure si val la pena el canvi necessitaria estadístiques de les
comandes que utilitzo. Ja ho vaig intentar fa temps amb [[https://github.com/dacap/keyfreq][keyfreq]] però
tenia problemes al obrir varies instàncies d'emacs al mateix temps.

He vist que es pot configurar =keyfreq-file= per especificar l'arxiu
on es guarden les estadístiques; generar un nom basat en el PID del
procés sembla que eliminaria el problema. Caldria estudiar el format i
veure si després es poden fusioar fàcilment.

** TODO estudiar =project=                                             :idea:

Aniria be disposar del concepte de /projecte/ en emacs. No em cal res
sofisticat.

Emacs inclou el paquet [[file:/opt/emacs/26.2/share/emacs/26.2/lisp/progmodes/project.el.gz::;;;%20project.el%20---%20Operations%20on%20the%20current%20project%20-*-%20lexical-binding:%20t;%20-*-][project.el]], estudiar-lo.

** TODO estudiar "notifications"                                       :idea:
   :PROPERTIES:
   :CREATED: [2019-07-21 dg 10:53]
   :END:

El paquet [[file:/opt/emacs/26.2/share/emacs/26.2/lisp/notifications.el.gz::;;;%20notifications.el%20---%20Client%20interface%20to%20desktop%20notifications.][notifications.el]] defineix una interfície que permet
interactuar amb les notificacions de l'entorn (gràfic).

Es podria utilizar per mostrar el resultat d'executar els tests,
compilar ...

** TODO estudiar =ibuffer-vc=                                   :enhancement:
   :PROPERTIES:
   :CREATED: [2019-08-07 dc 11:35]
   :END:

https://github.com/purcell/ibuffer-vc

Interpreto que permet agrupar en =ibuffer= els buffers segons el
repositori de control de revisions al que pertanyen i operar sobre un
grup com un tot (per tancar-los p.e.). Podría ser útil al treballar en
/Hera/.

** TODO revisar procés d'instal·lació                                   :bug:
   :PROPERTIES:
   :CREATED: [2019-09-25 dc 20:32]
   :REFERER: [[file:~/.emacs.d/conf.d/notes.org]]
   :END:

Al instal·lar emacs 26.3 des de codi font en un entorn minimalista
(una VM per fer unes proves) s'han detectat alguns detalls que han
allargat la instal·lació més del desitjable:

- al instal·lar el paquet emacs (24.x) des del repositori d'ubuntu el
  paquet =transient= es queixava de la versió. Sobre açò no es pot fer
  gran cosa (?).

- s'ha compilat emacs amb un conjunt mínim de dependències i algunes
  funcions no estan disponibles.

  Resolt definint funcions /dummy/.

- revisar el procés de instal·lació de org. Instal·lar-lo clonat el
  repositori git requereix instal·lar =texinfo=. La versió d'org
  (9.1.9) inclosa amb Emacs 26.3 sembla suficient per processar la
  configuració.

  S'ha instal·lat org des de ELPA. =org-version= diu 9.1.9 però indica
  la ruta de =elpa=. A veure com es comporta.

  Un altre detall que s'ha detectat i que potser caldria revisar és
  que org s'instal·la des de el script =settings.sh= que, si no
  m'equivoco, s'executa després de =settings.el=.

- errors variats durant l'arranc.

  #+begin_src text
    Starting new Ispell process ispell with default dictionary...
    Error enabling Flyspell mode:
    (Searching for program El fitxer o directori no existeix ispell)
    Configuring package company...done
    For information about GNU Emacs and the GNU system, type C-h C-a.
    File mode specification error: (void-function org--check-org-structure-template-alist)
    Setting up indent for shell type bash
    Indentation variables are now local.
    Indentation setup for shell type bash
    Starting new Ispell process ispell with default dictionary...
    Error enabling Flyspell mode:
    (Searching for program El fitxer o directori no existeix ispell)
    Starting new Ispell process ispell with default dictionary...
    Error enabling Flyspell mode:
    (Searching for program El fitxer o directori no existeix ispell)
  #+end_src

- el script =update-from-git= descarrega i instal·la org si no està
  instal·lat localment.

  Pel que respecta a org la solució més elegant probablement seria
  comprovar la versió mínima requerida (9 probablement) i si no està
  disponible mostrar un error i avortar (?). Açò impediria arrancar
  emacs per instal·lar org?. És complicat instal·lar-lo amb =emacs
  -Q=? Potser =init.el= comprova la versió mínima i si no està
  disponible arranca emacs sense fer cap processament? Val la pena
  complicar-se tant la vida si habitualment faig servir Emacs 26.x?

** PAUS provar /close and kill buffer in pane/                  :enhancement:
   :PROPERTIES:
   :CREATED:  [2019-10-10 dj 09:13]
   :END:

   - State "PAUS"       from "PAUS"       [2019-10-11 dv 11:49] \\
     Si es crida =ace-window= amb el prefix 16 (C-u C-u) es tanca la
     finestra seleccionat.

     Suposo que podré incorporar-ho als meus hàbits.
   - State "PAUS"       from "TODO"       [2019-10-10 dj 19:31] \\
     Es confirma que no és gaire fiable al triar la finestra que tancarà.
     Alternatives:

     - utilitzar alguna cosa semblant a la funció [[help:ace-window][=ace-window=]] per
       seleccionar la finestra manualment i tancar-la.

     - definir una opció personalitzable que emmagatzemi una llista de
       noms de buffer que es segur tancar.

https://www.emacswiki.org/emacs/KillingBuffers

Aparentment permet tancar una finestra temporal (=Help=, =Completions=
etc). No estic segur de si la forma en que determina l'altra finestra
és suficientement robusta.

#+BEGIN_SRC emacs-lisp
  (defun close-and-kill-next-pane ()
    "If there are multiple windows, then close the other pane and kill the buffer in it also."
    (interactive)
    (other-window 1)
    (kill-this-buffer)
    (if (not (one-window-p))
        (delete-window)))
#+END_SRC

** TODO estandarditzar una Makefile pels paquets emacs                 :idea:

En aquesta entrada Chris Wellons descriu l'estructura del Makefile que
utilitza en els seus paquets:

https://nullprogram.com/blog/2020/01/22/

** TODO accés ràpid a les refcards                                     :idea:

Emacs inclou vàries refcards en format pdf. Mirar de facilitar l'accés
des de Emacs. Estan guardades en:

/opt/emacs/26.3/share/emacs/26.3/etc/refcards

Hi ha algunes traduccions que caldria ignorar.

** TODO revisar configuració de /show trailing whitespace/
   :PROPERTIES:
   :CREATED: [2020-03-19 dj 18:20]
   :REFERER: [[file:~/.emacs.d/conf.d/settings.org::*wombat][wombat]]
   :END:

Si no recordo mal la variable =show-trailing-whitespace- es defineix
com =t= en els modes de programació (=prog-mode=) i després s'activa
individualment en la resta.

Potser seria preferible activar-la sempre i desactivar-la cas per cas.

** PAUS revisar color del cursor insert/overwrite                       :bug:
   :PROPERTIES:
   :CREATED: [2020-03-19 dj 18:20]
   :END:

   - State "PAUS"       from "TODO"       [2020-03-26 dj 09:11] \\
     S'afegeix una funció a =post-command-hook=.

     Es deixa en pausa mentre es comprova si afecta negativament al
     rendiment.

Al canviar de finestra el color del cursor es manté però el mode
insert/overwrite pot canviar.

Caldria buscar un /hook/ que es dispari al canviar el buffer dins la
mateixa finestra, o al canviar de finestra (dins el mateix o un altre
frame) i afegir una funció que comprovi el mode i ajusti el color.

** TODO Configurar la posició de les finestres                  :enhancement:

Exemples de com restringir on s'obren les finestres:

- http://juanjose.garciaripoll.com/blog/arranging-emacs-windows/index.html

- https://protesilaos.com/codelog/2020-01-07-emacs-display-buffer/

** TODO fer =svn-status= de l'arrel, no de la carpeta actual           :idea:
   :PROPERTIES:
   :CREATED: [2020-03-23 dl 13:02]
   :REFERER:
   :END:

M'he acostumat a que =git-status= mostra l'estat des de l'arrel i no
des de la carpeta en que s'executa la comanda. Ho trobo a faltar an
subversion.

Definir un /wrapper/ =arv/svn-status= que busqui el /dominant file/
=.svn=, canvii directori i executi =svn-status=.

** TODO configurar electric-pair en org-mode                    :enhancement:
   :PROPERTIES:
   :CREATED: [2020-03-25 dc 17:01]
   :REFERER: [[file:~/.emacs.d/conf.d/settings.org::*Configuració de tecles][Configuració de tecles]]
   :END:

Actualment tinc desactivats els parells-elèctrics en =org-mode=. No
recordo el motiu.

Con afegir nous parells a =electric-pair-mode=. Permetria eliminar la
funció =arv/org-emphasize=.

https://emacs.stackexchange.com/questions/2538/how-to-define-additional-mode-specific-pairs-for-electric-pair-mode

En resum:

#+begin_src emacs-lisp
  (defvar org-electric-pairs '((?/ . ?/) (?= . ?=)) "Electric pairs for org-mode.")

  (defun org-add-electric-pairs ()
    (setq-local electric-pair-pairs (append electric-pair-pairs org-electric-pairs))
    (setq-local electric-pair-text-pairs electric-pair-pairs))

  (add-hook 'org-mode-hook 'org-add-electric-pairs)
#+end_src

** TODO revisar comandes de compilació                          :enhancement:
   :PROPERTIES:
   :CREATED: [2020-03-25 dc 17:12]
   :REFERER: [[file:~/.emacs.d/conf.d/settings.org::*Hook][Hook]]
   :END:

En la configuració he definit varies comandes de compilació (per
sphinx i typscript que recordi) per lidiar amb els codis ANSI (crec
que era l'únic motiu).

Aquesta sembla una solució més neta:

https://stackoverflow.com/questions/13397737/ansi-coloring-in-compilation-mode

Concretament, la segona respota:

#+begin_src emacs-lisp
  (ignore-errors
    (require 'ansi-color)
    (defun my-colorize-compilation-buffer ()
      (when (eq major-mode 'compilation-mode)
        (ansi-color-apply-on-region compilation-filter-start (point-max))))
    (add-hook 'compilation-filter-hook 'my-colorize-compilation-buffer))
#+end_src

* Paquets extra

Llista de paquets que he anat trobant i que m'han cridat l'atenció
però que ara mateix no puc/vull provar. Ordenats cronològicament
(descubriments més recents al final):

- [[https://gitlab.com/jgkamat/rmsbolt][RMSBolt]]: semblant a [[https://godbolt.org/][compiler explorer]], però s'executa dins emacs.
  Permet veure el codi esamblador o /bytecode/ generat per un
  programa.

- [[https://github.com/wasamasa/eyebrowse][eyebrowse]] i [[https://github.com/seudut/perspeen][perspeen]] faciliten definir /workspaces/ i canviar entre
  ells.

- [[https://pawelbx.github.io/emacs-theme-gallery/][galeria de temes]], no exactament un paquet

- [[https://github.com/flycheck/flycheck-pos-tip][flycheck-pos-tip]]: This Flycheck extension shows errors under point
  in pos-tip popups.

- [[https://github.com/Fuco1/flow-js2-mode][flow-js2-mode]]: this package adds support for [[https://flow.org][Flow]], a static
  typechecking extension for javascript, to js2-mode, a popular
  javascript editing mode for Emacs.

- [[https://github.com/victorhge/iedit][iedit]]: This package includes Emacs minor modes (iedit-mode and
  iedit-rectangle-mode) based on a API library (iedit-lib) and allows
  you to edit one occurrence of some text in a buffer (possibly
  narrowed) or region, and simultaneously have other occurrences
  edited in the same way, with visual feedback as you type.

  Pel que he vist en [[https://www.youtube.com/watch?v=XAHVwhTsF-g][aquest vídeo]] sembla més potent del que penssava
  (crec que ja el vaig trobar fa temps i el vaig descartar).

- [[https://github.com/magit/transient/blob/master/docs/transient.org][transient]]: no acabo d'entendre la descripció, imagino que és
  l'element de =magit= que facilita construir les comandes. Estic
  pensant en utilitzar-ho en =djira-el= per interactuar amb
  =manage.py=.

- [[https://github.com/Fuco1/smartparens][smartparens]]: Smartparens is a minor mode for dealing with pairs in
  Emacs.

  No recordo el motiu per interessar-me per aquest paquet, em sona que
  vaig veure un vídeo en que mostrava com tancar entre paréntesis un
  element existent, sense haver de seleccionar-lo inicialment.

  2019-09-08: aparentment és semblant a =paredit= i es pot utilitzar
  en altres llenguatges a més de lisp. Es pot configurar si es vol que
  sigui més (com paredit) o menys estricte.

  A diferencia de =paredit=, aquest paquet sembla que és mantingut.

- [[https://github.com/jorgenschaefer/emacs-buttercup][buttercup]]: Buttercup is a behavior-driven development framework for
  testing Emacs Lisp code. It allows to group related tests so they
  can share common set-up and tear-down code, and allows the
  programmer to “spy” on functions to ensure they are called with the
  right arguments during testing.

  - [[http://www.modernemacs.com/post/testing-emacs/][Blog post]] amb una introducció ràpida.

  - [[https://github.com/jorgenschaefer/emacs-buttercup/blob/master/docs/writing-tests.md][Writing tests]]

  - [[https://github.com/jorgenschaefer/emacs-buttercup/blob/master/docs/running-tests.md][Running tests]]

- [[https://github.com/cask/cask][cask]]: Cask is a project management tool for Emacs that helps
  automate the package development cycle; development, dependencies,
  testing, building, packaging and more.

  [[https://cask.readthedocs.io/en/latest/][Documentació]].

  Fa temps vaig intentar utilitzar-lo però no me'n vaig sortir. No
  recordo que tingués documentació.

- [[https://github.com/expez/company-quickhelp][company-quickhelp]]: mostra un popup amb la documentació de la
  /completació/ seleccionada.

- [[https://github.com/syohex/emacs-company-jedi][company-jedi]]: backend per company. Actualment ja em funciona la
  completació en python, =elpy=?

- [[https://github.com/JackCrawley/pygen][pygen]]: Pygen is a package that allows the user to automatically
  generate Python code.

  El que es veu en els screencasts té molt bona pinta, malauradament
  l'autor ha deixat emacs i no s'actualtiza des de finals de 2017.

- [[https://github.com/alphapapa/prism.el][prism]]: Disperse Lisp forms into a spectrum of colors by depth

  Sembla que ajuda a identificar (distingir) expressions elisp en
  funció de la seva profundidat. Pot resultar útil al estudiar
  funcions complexes.

- [[https://github.com/tonini/overseer.el][overseer]]: Overseer integrates this tool into emacs and let's you
  using it inside your lovely editor.

  No tinc clares les avantages respecte a executar =ert= directament.

- [[https://github.com/dajva/rg.el][rg]]: Use [[https://github.com/BurntSushi/ripgrep][ripgrep]] in Emacs.

  Alternativa a =grep=, =grin=, =ag= etc. Aparentment més ràpida i amb
  molta funcionalitat.

- [[https://github.com/karlotness/tree-sitter.el][tree-sitter]]: An Emacs dynamic module exposing [[https://github.com/tree-sitter/tree-sitter][tree-sitter]].

  Tree-sitter is a parser generator tool and an incremental parsing
  library. It can build a concrete syntax tree for a source file and
  efficiently update the syntax tree as the source file is edited.
  Tree-sitter aims to be:

  - General enough to parse any programming language

  - Fast enough to parse on every keystroke in a text editor

  - Robust enough to provide useful results even in the presence of
    syntax errors

  - Dependency-free so that the runtime library (which is written in
    pure C) can be embedded in any application

  No tinc previst un ús però podria valdre per implementar edició
  estructurada.

  Anotat per fer un seguiment de la seva evolució.

- [[https://savannah.gnu.org/projects/oo-browser/][oo-browser]]: The OO-Browser is a multi-windowed, interactive
  object-oriented class browser similar in use to the well-known
  Smalltalk browsers. It is unique in a number of respects foremost of
  which is that it works well with a multiplicity of object-oriented
  languages.

- [[https://github.com/gonewest818/dimmer.el][dimmer]]: Visually highlight the selected buffer.

  Semblant a la configuració que tinc de terminator, enfosqueix els
  buffers no actius per facilitar identificar el buffer actiu.

  [[https://github.com/emacsmirror/auto-dim-other-buffers][auto-dim-other-buffers]] sembla que fa el mateix, però sembla
  abandonat.

- [[https://github.com/akirak/poly-vue][poly-vue]]: Polymode for Vue.js single component files.

  No és gaire descriptiu, imagino que és un mode que permet editar
  components Vue que messclen HTML i js en un únic arxiu.

* Altres recursos

** elisp

- [[https://github.com/bbatsov/emacs-lisp-style-guide][emacs lisp style guide]]: This Emacs Lisp style guide recommends best
  practices so that real-world Emacs Lisp programmers can write code
  that can be maintained by other real-world Emacs Lisp programmers.

- estudiar paquet [[info:elisp#Generators][generadors]]

- estudiar paquet [[info:cl#Top][cl-lib]]

- estudiar paquet [[info:elisp#Sequence Functions][seq]]

- estudiar /benchmarks/. S'utilitzen en [[https://irreal.org/blog/?p=8621][aquest post]] de Irreal. Dona la
  sensació que son part d'emacs. Investigar-ho.

- [[http://xenodium.com/modern-elisp-libraries/index.html][Modern Emacs lisp libraries]]: enumera algunes biblioteques d'estil
  modern incloses en emacs i alternatives externes.

  En un comentari al post (en twitter) es citen [[https://github.com/emacs-mirror/emacs/blob/master/lisp/rtree.el][rtree.el]] (builtin) i
  http://www.dr-qubit.org/emacs_data-structures.html.

* Completat

** DONE [#A] =S-M-up/down= no funciona en /org/                         :bug:
   - State "DONE"       from "TODO"       [2018-03-31 ds 13:29] \\
     Aparentment en org 8.2 =M-up= i =M-S-up= fan el mateix mentre que en
     9.1 no. Suposo que sempre he utilitzat la segona variant.

Al intentar moure un /heading/ dins un document /org/ no funciona. Amb
=emacs -q= funciona. Amb =emacs -q= activant /org/ 9.1.7 falla.

També falla al moure un ítem d'una llista, només mou la primera línia:

- foo
- bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar bar
  bar bar bar bar bar bar bar bar bar bar bar bar bar bar
** CANC compilar configuració                                   :enhancement:
   :PROPERTIES:
   :CREATED: [2018-03-31 ds 18:23]
   :REFERER: [[file:~/.emacs.d/conf.d/settings.org::*Per%20mirar][Per mirar]]
   :END:

   - State "CANC"       from "TODO"       [2018-03-31 ds 22:43] \\
     En les proves en relació a [[*comparar temps de c%C3%A0rrega][comparar temps de càrrega]] he observat que:

     - compilar durant l'arranc, quan no tots els paquets estan
       disponibles, és una font assegurada de problemes.

     - increiblement el temps d'arranc quan =settings.elc= està present és
       major. =emacs-init-time= retornava 0.9 i 1.0 respectivament.

     Fins que no tinga més clar com funciona tot açò del /byte-compiling/
     me'n oblido del tema.
[[help:org-babel-load-file][
=org-babel-load-file=]] permet compilar l'arxiu generat abans de
carregar-lo.
** DONE [#C] comparar temps de càrrega                                 :task:

   - State "DONE"       from "TODO"       [2018-04-01 dg 00:55] \\
     emacs original 2.3s, use-package 0.9s

Instal·lar la configuració en /wst/ i comparar el temps d'arranc.

Aprofitant que es fa un desplegament des de zero, completar la
documentació de la instal·lació.

- requereix cap estructura de directoris prèvia? es pot crear?

- com canviar/especificar el directori d'instal·lació? Es podria
  utilitzar el pare del propi arxiu de configuració.

- documentar dependències (git, make ...)

- com es genera l'arxiu =settings.sh=? Només es regenera
  =settings.org=. Mirar si es pot generar l'altre automàticament, sinó
  explicar =C-c C-v t= (=org-babel-tangle=).
** DONE =rainbow-mode=                                                  :bug:
   :PROPERTIES:
   :CREATED: [2018-04-01 dg 00:49]
   :REFERER: [[file:~/.emacs.d/conf.d/notes.org::*comparar%20temps%20de%20c%C3%A0rrega][comparar temps de càrrega]]
   :END:

   - State "DONE"       from "TODO"       [2018-04-01 dg 02:43] \\
     r799: no es fixa el repositori globalment.

=rainbow-mode= ha desaparegut de repent, cap versió. Aparentment està
a ELPA (a la web apareix) però no apareix en =package-list-packages=.

Iniciant emacs només amb el repositori ELPA si apareix. Potser el
problema va apareixer quan vaig configurar =use-package= per /pinar/
melpa-estable (que no té el paquet)?

Si no hi ha alternativa, clonar-lo dins =~/.emacs.d/site-lisp=:

    https://github.com/emacsmirror/rainbow-mode.git
** DONE =ace-window= i múltiples frames                                 :bug:
   :PROPERTIES:
   :CREATED: [2018-04-01 dg 00:52]
   :REFERER:
   :END:

   - State "DONE"       from "TODO"       [2018-04-01 dg 02:48] \\
     r800: es configura.

Si hi ha varis frames =C-x o= (=ace-window=) demana a quina finestra
saltar, encara que el frame actiu només tingui dos finestres.

Crec recordar que es podia configurar per oferir saltar únicament a
les finestres del frame actiu.

** DONE revisar =C-x b=                                                 :bug:
   :PROPERTIES:
   :CREATED: [2018-03-31 ds 23:22]
   :REFERER: [[help:ido-default-buffer-method]]
   :END:

   - State "DONE"       from "TODO"       [2018-04-01 dg 04:30] \\
     r808: es configura.

Quan treballo amb múltiples frames, =C-x b= pot canviar de frame si el
buffer és visible en ell. Aquest comportament m'ha sobtat i ha
interferit en el que volia fer, treballar en un buffer /a pantalla
completa/.

El valor de =ido-default-buffer-method= determina com canviar el
buffer. =selected-window= sembla que és el que necessito.

** DONE revisar codi elisp vell                                         :bug:
   :PROPERTIES:
   :CREATED: [2018-03-31 ds 01:17]
   :REFERER:
   :END:

   - State "DONE"       from "TODO"       [2018-04-01 dg 05:39] \\
     r809

Dins =./old-cfg/instances/common/init.d= hi ha mòduls amb codi elisp.
Defineix algunes comandes que s'utilitzen el el keybindings i
probablement brossa. Mirar que fer amb ells.

** DONE revisar paquets instal·lats                                    :task:
   :PROPERTIES:
   :CREATED: [2018-04-01 dg 06:05]
   :REFERER: [[file:~/.emacs.d/conf.d/settings.org::*Introducci%C3%B3][Introducció]]
   :END:

   - State "DONE"       from "TODO"       [2018-04-01 dg 15:33] \\
     r810

Paquets /interessants/ que només apareixen a la configuració vella.

Els paquests estan enllaçats a la seva descripció. Perquè els links
funcionin cal haver executat prèviament =M-x package-list-packages=.

- [[elisp:(describe-package 'ansi)][ansi-0.4.1]]: no ho entenc, probablement dependència (PD)
- [[elisp:(describe-package 'cm-mode)][cm-mode-1.6]]: no l'utilitzo, PD
- [[elisp:(describe-package 'commander)][commander-0.7.0]]: parser línia ordres, PD
- [[elisp:(describe-package 'company-go)][company-go-20150303]]
- [[elisp:(describe-package 'embrace)][embrace-0.1.3]]
- [[elisp:(describe-package 'epl)][epl-0.8]]: sanititza =package.el=, PD
- [[elisp:(describe-package 'f)][f-1.18.1]]
- [[elisp:(describe-package 'feature-mode)][feature-mode-0.4]]: mode per editar tests BDD, mai no l'he
  utilitzat (NU)
- figlet
- [[elisp:(describe-package 'flymake)][flymake-0.4.16]]: seguir amb el /builtin/ o passar a =flycheck=
- flymake-go-2013.3.14: melpa (inestable)
- git-rebase-mode-1.0.0: integrat en =magit=
- [[elisp:(describe-package 'go-eldoc)][go-eldoc-0.30]]
- [[elisp:(describe-package 'go-mode)][go-mode-1.5.0]]
- [[elisp:(describe-package 'haml-mode)][haml-mode-3.1.9]]: dependència de =sass-mode=, NU
- [[elisp:(describe-package 'hydra)][hydra-0.13.6]]
- [[elisp:(describe-package 'json-mode)][json-mode-1.7.0]]: emacs inclou un mode =json=, no utilitzo tant
  =json= com per justificar un nou mode i aquest no aporta gran cosa
  directament (integra altres paquets). Sembla abandonat (AB).
- [[elisp:(describe-package 'json-reformat)][json-reformat-0.0.6]]: emacs inclou /pretty printer/ per =json=
- [[elisp:(describe-package 'json-snatcher)][json-snatcher-1.0.0]]: interessant però NU
- [[elisp:(describe-package 'let-alist)][let-alist-1.0.5]]: macro curiosa, actualment builtin (BI)
- [[elisp:(describe-package 'load-relative)][load-relative-1.2]]: interessant per treballar en paquets amb
  múltiples mòduls però sembla una mica abandonat i em preocupa
  hipotecar-me.
- [[elisp:(describe-package 'loc-changes)][loc-changes-1.2]]: interessant, PD
- lorem-ipsum-0.1: melpa (inestable), abandonat, probablement
  millor clonar repo (https://github.com/jschaf/emacs-lorem-ipsum.git)
- [[elisp:(describe-package 'mmm-mode)][mmm-mode-0.5.4]]: PD, potser de vue-mode que NU
- noflet-0.0.15: melpa, macro màgica, PD
- [[elisp:(describe-package 'paradox)][paradox-2.5.1]]: millor interacció amb el gestor de paquets, no ho
  utilitzo tant per justificar-ho.
- [[elisp:(describe-package 'pkg-info)][pkg-info-0.6]]: PD
- [[elisp:(describe-package 'projectile)][projectile-0.14.0]]: no l'utilitzo. Potencial com framework sobre
  el que desenvolupar paquets que treballin sobre /el projecte/. Fa
  temps que es publica una release.
- [[elisp:(describe-package 'seq)][seq-2.20]]: BI
- [[elisp:(describe-package 'spinner)][spinner-1.7.3]]: PD (de paradox?)
- [[elisp:(describe-package 'test-simple)][test-simple-1.2.0]]: framework per tests, AB, mirar alternatives
  millor mantingudes.
- workgroups-0.2.0: AB i NU

** DONE [#A] estudiar =use-package=                             :enhancement:

   - State "DONE"       from "TODO"       [2018-04-01 dg 16:09] \\
     Canvis fets:

     =:diminish= té el seu propi TODO

     El temps d'arranc és ràpid, no vull perdre més temps en aquest punt.
     Metre puga tiraré de =package.el=, dependències.

     Ja s'utilitzen les /clausules/ rellevant excepte per =:bind=, però el
     tema de configurar el teclat encara no el tinc perfilat del tot.
- incorporar =:diminish=

- per paquets instal·lats manualment, aparentment permet especificar
  la ruta.

- messurar l'impacte en el temps d'arranc de =:ensure t=. Si cal,
  definir una variable d'entorn que influeixi en el comportament. En
  la [[http://pages.sachachua.com/.emacs.d/Sacha.html#org0477c97][configuració de Sacha Chua]] he vist que es pot definir un valor
  global per defecte per =:ensure=.

- incorporar =:commands=

:after :bind :bind* :bind-keymap :bind-keymap* :commands :config
:defer :defines :delight :demand :diminish :disabled :ensure
:functions :if :init :interpreter :load-path :mode :no-require :pin
:preface :requires :unless :when

En [[https://www.youtube.com/watch?v=2TSKxxYEbII&t=530][aquest vídeo]] es comenta que es pot aprofitar el =:load-path= per
accelerar la càrrega i eliminar =package-initialize= (i probablement
inutilitzant tot =package.el=). Interpreto que =package-initialize=
carrega almenys els =autoloads=, ralentitzant l'arranc, mentre que
=use-package= + =:load-path= és /lazy/.

Haver de gestionar tots els paquets manualment em tira enrere, per la
gestió de dependències principalment.

- estudiar =package.el= per entendre millor que fa
  =package-initialize=

- mirar si existeix cap estensió de =use-package= que permeti fer
  /checkouts/ de repositòris VCS, diguem en =~/.emacs.d/site-lisp~,
  configuri el path etc.
** CANC revisar =uniquify=                                      :enhancement:
   :PROPERTIES:
   :CREATED: [2018-03-30 dv 03:14]
   :REFERER: [[file:settings.org::*=uniquify=][=uniquify=]]
   :END:

   - State "CANC"       from "TODO"       [2018-04-01 dg 16:56] \\
     He confirmat que el funcionament és el mateix en la configuració
     original per tant serà un problema de percepció.

El funcionament d'=uniquify= no m'agrada: al obrir =/tmp/foo.py= i
=~/tmp/foo.py= els noms assignats als buffers són =foo.py\= i
=foo.py\aroda= respectivament, em resulten una mica confusos.

La variable =uniquify-strip-common-suffix= podria ajudar.

** CANC Afegir keybinding                                              :idea:
   :PROPERTIES:
   :CREATED: [2018-03-30 dv 10:42]
   :REFERER: [[file:settings.org::*=paredit=][=paredit=]]
   :END:

   - State "CANC"       from "TODO"       [2018-04-01 dg 16:58] \\
     =C-x k he RET= és suficientment àgil, no cal estressar-se, i
     conneixent-me definiré la comanda i mai la utilitzaré.

     En relació a tancar varis buffers, =ibuffer= ofereix prestacions
     interessants.

És habitual obrir un buffer =*Help*=, consultar i tancar. Tancar-lo
hauria de ser àgil (ara utilitzo =C-x k help RET=).

#+begin_src emacs-lisp :tangle no
  (defun arv/close-help-buffer-maybe ()
    (interactive)
    (let ((buffer (get-buffer "*Help*")))
      (when buffer
        (kill-buffer buffer))))
#+end_src

Assignar-ho a una tecla fàcil de recordar i utilitzar.

En la mateixa línia, potser la idea es podria generalitzar per tancar
certs buffers (una llista configurable, una expressió regular ...).

** DONE Ajustar face de =ace-jump-mode=                                 :bug:
   :PROPERTIES:
   :CREATED: [2018-03-31 ds 22:07]
   :REFERER: [[file:~/.emacs.d/conf.d/notes.org::*comparar%20temps%20de%20c%C3%A0rrega][comparar temps de càrrega]]
   :END:

   - State "DONE"       from "TODO"       [2018-04-01 dg 18:11] \\
     r813

En una terminal, la lletra que permet triar la finestra no és gaire
visible.

** DONE [#A] netejar keybinding                                         :bug:

   - State "DONE"       from "TODO"       [2018-04-01 dg 19:45] \\
     r814

Al migrar la configuració he eliminat alguna funcionalitat i algunes
tecles fallaran amb =Symbol's function definition is void=.

Mirar lo complicat que seria escanejar els keymaps buscant tecles per
le que =fboundp= avalua a =nil=.

** DONE revisar funció =grin=                                   :enhancement:
   :PROPERTIES:
   :CREATED: [2018-03-30 dv 00:53]
   :REFERER: [[file:settings.org::*=grin=][=grin=]]
   :END:

   - State "DONE"       from "TODO"       [2018-04-01 dg 21:00] \\
     r815.

Preferiria una implementació amb una clausura, en la línia del codi
següent, però no acabo de tindre clar el tema del /lexical binding/ en
emacs lisp.

#+begin_src emacs-lisp :tangle no
  (use-package grin
    :ensure t
    :config
    (let ((real-grin (symbol-function 'grin)))
      (defun grin ()
        (interactive)
        (let ((default-directory (ido-read-directory-name "Directory: " nil nil t)))
          (funcall real-grin)))))
#+end_src

** DONE integrar =ox-twbs=                                      :enhancement:
   :PROPERTIES:
   :CREATED: [2018-03-31 ds 01:21]
   :REFERER: [[file:~/.emacs.d/conf.d/notes.org::*error%20en%20HTML][error en HTML]]
   :END:

   - State "DONE"       from "TODO"       [2018-04-01 dg 22:16] \\
     r816

Mirar com afegir =ox-twbs= a la pantalla d'exportació (=C-c C-e=),
preferiblement en el grup HTML.

** DONE millorar =figlet=                                              :idea:
   :PROPERTIES:
   :CREATED: [2018-04-01 dg 19:39]
   :REFERER:
   :END:

   - State "DONE"       from "TODO"       [2018-04-02 dl 01:08] \\
     r817

El paquet =figlet= únicament genera text dins un comentari. Afegir
comanda per genera text sense comentari.

Revisar el codi, crec que havia alguna cosa més que volia canviar.
** DONE repensar comandes sh                                            :bug:
   :PROPERTIES:
   :CREATED: [2018-04-01 dg 15:05]
   :REFERER: [[file:~/.emacs.d/conf.d/settings.org::*helpers%20sh][helpers sh]]
   :END:

   - State "DONE"       from "TODO"       [2018-04-02 dl 19:03] \\
     r826

Al incorporar el paquet =emacs-lorem-ipsum= he detectat que no es pot
instal·lar executant el bloc de codi sh des del document.

El problema és que =elisp_clone_git= i =elisp_compile_package= son
funcions i no estan definides en el context en que s'avalua el bloc de
codi.

Convertir-les en scripts, dins el directori =scripts= sembla que
resoldria el problema. Caldria ajustar els blocs existents, prefixant
les comandes amb =./scripts/xxxx= i extreure tambés les variable din
l'arxiu =./scripts/config= (que seria /sourced/ pels scripts).

** DONE gestió del directori =site-lisp=                                :bug:
   :PROPERTIES:
   :CREATED: [2018-04-02 dl 21:55]
   :REFERER: [[file:~/.emacs.d/conf.d/settings.org::*Directori%20=site-lisp=][Directori =site-lisp=]]
   :END:

   - State "DONE"       from "TODO"       [2018-04-03 dt 20:13] \\
     r838

Implementar scripts per automatitzar la gestió dels paquets en
=~/.emacs.d/site-lisp=:

- pull + compilar
- esborrar un paquet

** DONE error en figlet                                                 :bug:
   :PROPERTIES:
   :CREATED: [2018-04-04 dc 16:18]
   :REFERER:
   :END:

   - State "DONE"       from "TODO"       [2018-04-04 dc 21:06] \\
     r842

En =ol2_candof_core=, =test_bloqueig_emails_candidatures_laborals.py=,
al inserir un comentari figlet sobre la secció d'operacions també es
comenten les dos primeres línies de la classe que va a continuació i
s'insereix un salt de línia en =def set\nUp=.

** DONE =elpy-goto-definition= no funciona                              :bug:
   :PROPERTIES:
   :CREATED: [2018-04-04 dc 09:41]
   :REFERER: [[file:~/projectes/bt2/impl/ol2_candof_empresa/ol2_candof_empresa/views/descarregar_adjunts.py::model%20=%20Estudiant]]
   :END:

   - State "DONE"       from "TODO"       [2018-04-05 dj 08:23] \\
     El problema és que no estava instal·lat el paquet =jedi= (en versions
     anteriors no calia, funcionava amb =rope=).

     Segon [[help:xref-find-definitions][l'ajuda]] el bindind de =M-.= sembla correcte.

En =python-mode=, per una banda la tecla =M-.= està definida com
=xref-find-definitions= i executant directament =elpy-goto-definition=
no funciona.

=company= no ha funcionat bé durant una estona, però probablement
sigui perquè /jedi/ estava fred.

** DONE =arv/django-mode= no s'activa                                   :bug:
   :PROPERTIES:
   :CREATED: [2018-04-04 dc 09:44]
   :REFERER: [[file:~/projectes/bt2/impl/ol2_candof_empresa/ol2_candof_empresa/views/descarregar_adjunts.py::model%20=%20Estudiant]]
   :END:

   - State "DONE"       from "TODO"       [2018-04-05 dj 08:30] \\
     Ara no recordo quin però un mòdul requeria =arv-django= quan el nom és
     =arv-py-django= (suposo que en algun punt durant la migració vaig
     canviar noms), el =require= fallava i la inicialització fallava abans
     de carregar =arv/django-mode=.

     Corregint el =require= ja funciona.

Al obrir arxius que pertanyen a un projecte django el mode
=arv/django-mode= no s'activa i les tecles =C-c d ...= no funcionen.

** DONE error en =my/camelize=                                          :bug:
   :PROPERTIES:
   :CREATED: [2018-04-05 dj 12:50]
   :REFERER:
   :END:

   - State "DONE"       from "TODO"       [2018-04-05 dj 18:01] \\
     r847

La comanda falla amb identificadors tipus =none=: són només alpha i
els identifica com /CamelCase/, la conversió /camel_case/ els deixa
igual.

En aquesta cas voldria convertir-lo en =None=.

** DONE comandes camelize i uncamelize                                 :idea:
   :PROPERTIES:
   :CREATED: [2018-04-04 dc 17:11]
   :REFERER: [[file:~/projectes/bt2/impl/ol2_oferta_evha/ol2_oferta_evha/tests/test_ol2_candof.py::GaranteixEmailAlActivarNofiticacionsDeNovesCandidatures]]
   :END:

   - State "DONE"       from "TODO"       [2018-04-05 dj 18:09] \\
     r844. M'he oblidat de tancar-lo en el seu moment.

Implementar comandes =arv/camelize-symbol-at-point= i
=arv/uncamelize-symbol-at-point=. Mirar a quina tecla assignar-les.

El mòdul =arv-yas= (crec) té implementacions.

** CANC eliminar confirmació al matar buffers                     :annoyance:
   :PROPERTIES:
   :CREATED: [2018-04-03 dt 00:29]
   :REFERER: [[file:~/.emacs.d/conf.d/notes.org::*Bugs,%20mol%C3%A8sties,%20millores%20etc.][Bugs, molèsties, millores etc.]]
   :END:

   - State "CANC"       from "TODO"       [2018-04-05 dj 21:03] \\
     Sembla que les confirmacions es desactiven per totes les comandes i no
     em trobo còmode fent-ho. Serà cosa d'acostumar-me.

En ibuffer, després de marcar varis buffers amb =d= l'execució (=x=)
demana confirmació. Mirar si es pot configurar per no demanar-la.

** DONE error amb la comanda =m= en buffers /info/                      :bug:

   - State "DONE"       from "TODO"       [2018-04-06 dv 22:06] \\
     r854

     He obert [[https://github.com/DarwinAwardWinner/ido-completing-read-plus/issues/151][una incidència]] a github.

     Provisionalment afegeixo la funció =Ido-menu= a la llista negra
     =ido-cr+-function-blacklist=. En aquesta pantalla no em treu la
     son perdre la funcionalitat de =ido=.

En buffers /info/ la comanda =m= (=Info-menu=) normalment congela
/emacs/ al cap d'uns segons de mostrar la llista de candidats. =C-g=
recupera el control.

Mirar si té a veure en algun del paquets =ido=.

Havia una mena d'error al inicialitzar =INFOPATH=, el directori
personal anava al final amb el que era ignorat. No veig com açò podria
confondre a /info/ però després de canviar-ho sembla estable.

Fent proves amb el valor de =INFOPATH= soc incapaç de reproduir el
comportament problemàtic. Alguna cosa ha canviat que ha resolt el
problema.

** DONE comportament estrany de variables locals                        :bug:
   :PROPERTIES:
   :CREATED: [2018-04-05 dj 11:13]
   :REFERER:
   :END:

   - State "DONE"       from "TODO"       [2018-04-06 dv 23:28] \\
     r856.

En Hera, quan es carrega =.dir-locals= demana confirmació de les
variables no segures. =!= sembla que les accepta (al menys les
inicialitza) però el canvi no es persisteix en =custom-file=.

Comportament estrany: al obrir explícitament =.dir-locals= s'esborren
algunes variables de l'arxiu =custom-file=. Si després s'obre
=xxx/setup.py= (p.e.) pregunta i n'afegeixen algunes, altres no.

Accepta =grin-cmd= com variable segura, però no em consta que tingui
cap definició especial, almenys en =grin.el=.

Probablement no tingui relació però ara no utilitzo =projectile=.

** DONE revisar =diminish=                                      :enhancement:
   :PROPERTIES:
   :CREATED: [2018-03-31 ds 22:13]
   :REFERER: [[file:~/.emacs.d/conf.d/notes.org::*comparar%20temps%20de%20c%C3%A0rrega][comparar temps de càrrega]]
   :END:

   - State "DONE"       from "TODO"       [2018-04-08 dg 22:04] \\
     En =wst= vaig activar temporalment /melpa/ i alguns paquets
     instal·lats eren no-estables. Tornant a /melpa stable/ i reinstal·lant
     des de zero el comportament és l'esperat.

     S'aprofita per moure la configuració de =diminish= als corresponents
     =use-package=.

Fent proves a =wst= he vist que la modeline mostrava varis /lighters/
de modes menors. Activant =diminish= (=(require 'diminish)=) han
desaparegut.

Potser és moment de moure la configuració de =diminish= als
corresponents =use-package=.

** DONE gestionar paquets absents durant la instal·lació                :bug:
   :PROPERTIES:
   :CREATED: [2018-04-01 dg 00:48]
   :REFERER: [[file:~/.emacs.d/conf.d/notes.org::*comparar%20temps%20de%20c%C3%A0rrega][comparar temps de càrrega]]
   :END:

   - State "DONE"       from "TODO"       [2018-08-18 ds 20:09] \\
     No m'ha tornat a passar. La causa podria ser que vaig configurar
     =use-package-always-pin= i es forçava l'us d'un repositori en que els
     paquets no estaven disponibles.

Si falta cap paquet durant la instal·lació aquesta aborta. Amb /pypi/
mai m'ha passat però amb /ELPA/ sembla habitual (primer =rainbow-mode=
va desapareixer d'un dia per l'altre i ara =magit= depen d'un paquet
no disponible).

Mirar si és possible fer que continui la instal·lació i al final
informi, de manera visible, que certs paquets no s'han pogut
instal·lar.
** DONE key shadowing al activar =flyspell-prog-mode=             :annoyance:
   :PROPERTIES:
   :CREATED: [2019-05-25 ds 23:11]
   :REFERER: [[file:~/prog/hera/python3/tercers/dja.layout/dja/layout/tests/test_forms.py::)]]
   :END:

   - State "DONE"       from "TODO"       [2019-06-13 dj 21:18] \\
     Resolt en r955.

Al activar =flyspell-prog-mode= (imagino que és la causa) la
combinació =C-.= (=er/expand-region=) no funciona. Enlloc d'expandir
la regió corregeix la paraula.

** DONE estudiar =smerge=                                       :enhancement:
   :PROPERTIES:
   :CREATED:  [2019-06-08 ds 19:13]
   :END:

   - State "DONE"       from "TODO"       [2019-08-08 dj 21:02] \\
     r970.

Molt ocasionalment he de resoldre conflictes en subversion. El paquet
[[help:smerge-mode][=smerge=]] sembla que simplifica el procés però dubto que puga recordar
els keybinding.

Aquest podria ser un us per =hydra=? He trobat aquesta definició en un
[[https://irreal.org/blog/?p=5651][post de Irreal]]:

#+begin_src emacs-lisp
  (defhydra hydra-smerge
    (:color red :hint nil
            :pre (smerge-mode 1))
  "
  ^Move^ ^Keep^ ^Diff^ ^Pair^
  ------------------------------------------------------
  _n_ext _b_ase _R_efine _<_: base-mine
  _p_rev _m_ine _E_diff _=_: mine-other
  ^ ^ _o_ther _C_ombine _>_: base-other
  ^ ^ _a_ll _r_esolve
  _q_uit _RET_: current
  "
    ("RET" smerge-keep-current)
    ("C" smerge-combine-with-next)
    ("E" smerge-ediff)
    ("R" smerge-refine)
    ("a" smerge-keep-all)
    ("b" smerge-keep-base)
    ("m" smerge-keep-mine)
    ("n" smerge-next)
    ("o" smerge-keep-other)
    ("p" smerge-prev)
    ("r" smerge-resolve)
    ("<" smerge-diff-base-mine)
    ("=" smerge-diff-mine-other)
    (">" smerge-diff-base-other)
    ("q" nil :color blue))
#+end_src
** DONE Error al obrir arxiu python                           :bug:annoyance:
   :PROPERTIES:
   :CREATED: [2019-10-29 dt 16:10]
   :REFERER: [[file:~/prog/hera/django10/src/hera_registration_empresa/hera_registration_empresa/views/utils.py::# -*- coding: utf-8 -*-]]
   :END:

   - State "DONE"       from "TODO"       [2019-10-30 dc 13:25] \\
     Error en l'especificació del tipus de defcustom
     =pytest-test-module-name-candidate-functions=.
Al obrir un arxiu python des de la línia d'ordres Emacs mostra el
missatge d'error:

#+begin_quote
File mode specification error: (error There is nothing to repeat)
#+end_quote

L'error no apareix si l'arxiu s'obre des de Emacs.

Per reproduir-ho:

#+begin_src sh
  workon hera_impl
  emacs src/hera_registration_empresa/hera_registration_empresa/views/utils.py &
#+end_src

Probablement l'error està relacionat amb els últims canvis fets a la
configuració de =pytest= (o =elpy=). Al no ocórrer quan s'obre des de
Emacs suposo que algun component encara no s'ha configurat.
** DONE Moure secció cpctelera                                          :bug:
   :PROPERTIES:
   :CREATED: [2020-03-20 dv 08:51]
   :REFERER: [[file:~/.emacs.d/conf.d/settings.org::*cpctelera][cpctelera]]
   :END:

   - State "DONE"       from "TODO"       [2020-03-26 dj 09:31] \\
     Aparentment està dins la secció /sphinx/ perquè utilitza la funció
     =arv/-sphinx-buid= per compilar el projecte.

     No tinc clar on ficar-ho, no es tracta de la configuració d'un paquet
     o un mode, és una eina dins un tipus de projecte (que mescla C i
     ensamblador).

     Com que tinc el tema cpctelera una mica abandonat i és una funció molt
     senzilla s'elimina de la configuració. Si em fico en serio en el tema
     de jocs per l'amstrad ja configuraré un entorn de treball apropiat,
     probablement utilitzant un /minor mode/.

No sé que fa la secció /cpctelera/ dins /rst/. Caldria moure-la.
** DONE Error en =arv/query-replace=                                    :bug:
   :PROPERTIES:
   :CREATED: [2020-03-20 dv 19:57]
   :REFERER: [[file:~/prog/bdfcee.homer/trunk/src/bdfcee.homer/bdfcee/homer/templates/homer/informe_pdi.html::function (InformePDI) {]]
   :END:

   - State "DONE"       from "TODO"       [2020-03-26 dj 13:58] \\
     El problema únicament es manifesta en blocs JS o CSS dins un arxiu
     HTML no en el contingut HTML.

     Es localitza el problema en l'expressió:

     #+begin_src emacs-lisp
       (read-string "Replace: " (thing-at-point 'symbol))
     #+end_src

     =thing-at-point= retorna un =string= amb properties. El valor
     retornat, la part de les propietats, varia depenent de si el punt està
     dins un bloc amb un mode /secundari/ (JS o CSS) o en un bloc purament
     HTML. Aparentment açò confon a =read-string=. Eliminant les propietats
     el problema desapareix.

     En les properties he vist que havia una mena de definició d'un
     /keymap/, açò podria explicar el canvi de comportament de la tecla
     =RET=.

En l'arxiu del =REFERER= intento canviar /InformeOcupacio/ per
/InformePDI/ amb =M-%= (=arv/query-replace=). En el minibuffer, quan
demana el text que es vol canviar, al prémer =RET= insereix un return
enlloc de confirmar-lo.

No passa amb =query-replace=.
** DONE comportament de =<= en =org-mode=                               :bug:
   :PROPERTIES:
   :CREATED: [2020-03-27 dv 14:39]
   :REFERER: [[file:~/prog/hera/impl/doc_dev/TODO.org::*Comanda per llistar receivers de signals][Comanda per llistar receivers de signals]]
   :END:

   - State "DONE"       from "TODO"       [2020-03-27 dv 18:28] \\
     El propi =org= defineix entrades en la /syntax table/ per "<" i ">"
     com parentésis.

     Es reseteja el valor d'aquestes entrades.

En el arxiu =org= del referer al prémer =<= s'insereix =<=. En aquesta
arxiu en que prenc la nota s'insereix =<>=.

Resulta molest al escriure =<s= per generar un bloc de codi.
** DONE ample de la numeració de línees                           :annoyance:
   :PROPERTIES:
   :CREATED: [2020-02-06 dj 19:45]
   :REFERER: [[file:/ssh:alex@wst:/home/alex/prog/arv.mold/src/arv.mold/arv/mold/mold.py::return os.path.relpath(path, self._template_dir)]]
   :END:

   - State "DONE"       from "TODO"       [2020-02-08 ds 20:11] \\
     No trobo com configurar el valor mostrat per la línia actual. Es
     configura l'ample a 3 i que mai disminueixi l'amplada una vegada a
     crescut.

Al fer scroll vertical l'ample ocupat pel número de línia s'ajusta
quan passa de decenes a centenes etc. En eixe moment es produeix un
sacseig horitzonal que em resulta molest.

- l'única variació sobre el nombre de dígits necessaris és la que es
  produeix en la línia actual. La resta de valors son deltes i amb 2
  (o 3) dígits és suficient, independentment del nombre de línies de
  l'arxiu.

- utilitzo numeració relativa i no m'interesa el número de la línia
  actual (el tinc a la modeline si em cal).

- el sacseig es produeix una mica abans de necessitar més dígits. No
  estic segur de si és un bug.

Amb les pantalles que utilitzo habitualment crec que amd dos dígits és
suficient per la numeració relativa, potser en calen tres (?). Mirar
si és possible configurar =display-line-number= de forma que la línia
actual es numeri com 0 (i per tant no variï el nombre de dígits) i
fixar el nombre de dígits per evitar el sacseig (només en cas que
puguin caldre 2 i 3 dígits).
** DONE revisar snippets                                                :bug:
   :PROPERTIES:
   :CREATED: [2018-04-07 ds 13:09]
   :REFERER: [[file:~/prog/di/project/myapp/models.py::)]]
   :END:

   - State "DONE"       from "TODO"       [2020-03-29 dg 18:30] \\
     Efectivament, el mòdul no estava carregat i la funció
     =pyx/get-current-package-name= no tenia un autoload. S'afegeix
     l'autoload.

Al expandir el /snippet/ =djmf= dóna error:

#+begin_src txt
yas--snippet-parse-create: Wrong type argument: char-or-string-p, (pyx/get-current-package-name)
#+end_src

L'expansió de =djmodel= no mostra cap error (crec, no m'he fixat) però
és incorrecta.

Crec que vaig renombrar algunes funcions. També és possible que
=arv-py= no estigui carregat en aquest punt? improbable.
** DONE Desactivar =hl-line-mode= en =term=                       :annoyance:
   :PROPERTIES:
   :CREATED: [2020-03-21 ds 20:15]
   :REFERER: [[file:~/.emacs.d/conf.d/settings.org::*=term=][=term=]]
   :END:

   - State "DONE"       from "TODO"       [2020-03-29 dg 21:12] \\
     He trobat com descativar =global-hl-line-mode= localment.

     El tema dels colors de =hl-line= no em molesta com per no donar-ho per
     resolt.

Veure comentaris en la secció referenciada pel =REFERER=.

El problema es qué en la secció [[id:ea3e7059-fedc-44b2-b1d6-55e3326d050e][=hl-line=]] s'activa =hl-line-mode=
globalment i aparentment no es pot desactivar per buffer.

Indirectament relacionat, la /face/ =hl-line= no acaba de funcionar bé
en algunes ocasions (veure la nota en la personalització del tema
=modus-operandi=). La forma en que ho /resolc/ perd colors. No és la
fi del mon i ho prefereixo a perdre legibilitat però me'n acabo
d'adonar que el ressaltat de =swiper= sí que preserva els colors i no
té el problema de =hl-line=.

El comportament sembla diferent entre emacs 27.0.90 (més o menys OK) i
26.3 (no OK).
